import groovy.json.JsonSlurper

plugins {
    id 'java-library'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
}

int auto_update_version = 0; String version_filename = project.version_filename

if (!file(version_filename).exists()) new File(projectDir, version_filename).text = auto_update_version as String

version = "1.0.${file(version_filename).text.trim()}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

ext.publishToMaven = { args ->
    def repoUrl = args.repoUrl
    def gitConnection = args.gitConnection
    def gitDeveloperConnection = args.gitDeveloperConnection
    def mavenUsername = args.username
    def mavenPassword = args.password
    def versionFilename = args.versionFilename ?: "version.txt" // default fallback

    publishing {
        if (!version.endsWith('snapshot') && file(versionFilename).exists()) {
            def autoUpdateVersion = file(versionFilename).text.trim() as Integer

            gradle.addListener(new BuildListener() {
                @Override
                void buildFinished(BuildResult result) {
                    if (!result.failure) {
                        new File(projectDir, versionFilename).text = (autoUpdateVersion + 1) as String
                        println "Project build ${autoUpdateVersion} complete, version updated."
                    }
                }

                @Override void settingsEvaluated(Settings settings) {}
                @Override void projectsLoaded(Gradle gradle) {}
                @Override void projectsEvaluated(Gradle gradle) {}
            })
        }

        def mavenGroup = project.maven_group
        def archivesBaseName = project.archives_base_name
        def projectVersion = project.version

        publications {
            create("mavenJava", MavenPublication) {
                groupId = mavenGroup
                artifactId = archivesBaseName
                version = projectVersion

                from components.java

                def inputFile = file("src/main/resources/fabric.mod.json")
                if (inputFile.exists()) {
                    def json = new JsonSlurper().parseText(inputFile.text)

                    pom {
                        name = json.name
                        description = json.description
                        url = json.contact?.repo ?: ""
                        developers {
                            developer {
                                id = json.authors?.getAt(0) ?: "unknown"
                                name = json.authors?.getAt(0) ?: "unknown"
                            }
                        }
                        scm {
                            connection = gitConnection
                            developerConnection = gitDeveloperConnection
                            url = repoUrl
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url = !version.endsWith('snapshot') ? repoUrl + "/releases" : repoUrl + "/snapshots"
                credentials {
                    username = mavenUsername
                    password = mavenPassword
                }
            }
        }
    }
}

publishing {
    publishToMaven (
            repoUrl: "https://repo.repsy.io/mvn/arukusuiinpu/central",
            gitConnection: "scm:git:git://github.com/arukusuiinpu/iinpulib.git",
            gitDeveloperConnection: "scm:git:ssh://git@github.com:arukusuiinpu/iinpulib.git",
            username: repsyUsername,
            password: repsyPassword,
            versionFilename: project.version_filename
    )
}
